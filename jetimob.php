<?php 
/**
 * Plugin Name: Jetimob
 * Version: 3.1.1
 * Description: Plugin para sincronização de imóveis do Jetimob. Disponível para clientes do <a href="https://jetimob.com">Jetimob</a>.
 * Author: Jetimob
 * Author URI: https://jetimob.com
 * Text Domain: jetimob
 * Domain Path: /languages/
 * License: GNU General Public License v3.0
 * License URI: http://www.gnu.org/licenses/gpl-3.0.html
 * GitHub Plugin URI: https://github.com/opaweb/jetimob-plugin-wordpress
*/
register_activation_hook( __FILE__, array( 'Your_Plugin_Class_Name', 'activate' ) );

/**
  * Plugin Activation hook function to check for Minimum PHP and WordPress versions
  * @param string $wp Minimum version of WordPress required for this plugin
  * @param string $php Minimum version of PHP required for this plugin
  */
 function activate( $wp = '4.8', $php = '7.2.24' ) {
    global $wp_version;
    if ( version_compare( PHP_VERSION, $php, '<' ) )
        $flag = 'PHP';
    elseif
        ( version_compare( $wp_version, $wp, '<' ) )
        $flag = 'WordPress';
    else
        return;
    $version = 'PHP' == $flag ? $php : $wp;
    deactivate_plugins( basename( __FILE__ ) );
    wp_die('<p>O plugin <strong>Jetimob/strong> requer '.$flag.'  versão '.$version.' ou superior.</p>','Plugin Activation Error',  array( 'response'=>200, 'back_link'=>TRUE ) );
}
	
/**
 * Opções de Configuração do Plugin
 * Jetimob
 */

/**
 * Generated by the WordPress Option Page generator
 * at http://jeremyhixon.com/wp-tools/option-page/
 */

class Jetimob {
	private $jetimob_options;

	public function __construct() {
		add_action( 'admin_menu', array( $this, 'jetimob_add_plugin_page' ) );
		add_action( 'admin_init', array( $this, 'jetimob_page_init' ) );
	}

	public function jetimob_add_plugin_page() {
		add_menu_page(
			'Jetimob', // page_title
			'Jetimob', // menu_title
			'manage_options', // capability
			'jetimob', // menu_slug
			array( $this, 'jetimob_create_admin_page' ), // function
			'dashicons-building', // icon_url
			100 // position
		);
	}

	public function jetimob_create_admin_page() {
		$this->jetimob_options = get_option( 'jetimob_option_name' ); ?>

		<div class="wrap">
			<h2>Jetimob</h2>
			<p>Configure as opções do plugin Jetimob</p>
			<?php settings_errors(); ?>

			<form method="post" action="options.php">
				<?php
					settings_fields( 'jetimob_option_group' );
					do_settings_sections( 'jetimob-admin' );
					submit_button();
				?>
			</form>
		</div>
	<?php }

	public function jetimob_page_init() {
		register_setting(
			'jetimob_option_group', // option_group
			'jetimob_option_name', // option_name
			array( $this, 'jetimob_sanitize' ) // sanitize_callback
		);

		add_settings_section(
			'jetimob_setting_section', // id
			'Settings', // title
			array( $this, 'jetimob_section_info' ), // callback
			'jetimob-admin' // page
		);

		add_settings_field(
			'api', // id
			'API', // title
			array( $this, 'api_callback' ), // callback
			'jetimob-admin', // page
			'jetimob_setting_section' // section
		);

		add_settings_field(
			'gmaps', // id
			'Chave de API Google Maps', // title
			array( $this, 'gmaps_callback' ), // callback
			'jetimob-admin', // page
			'jetimob_setting_section' // section
		);

	}

	public function jetimob_sanitize($input) {
		$sanitary_values = array();
		if ( isset( $input['api'] ) ) {
			$sanitary_values['api'] = sanitize_text_field( $input['api'] );
		}
		if ( isset( $input['gmaps'] ) ) {
			$sanitary_values['gmaps'] = sanitize_text_field( $input['gmaps'] );
		}

		return $sanitary_values;
	}

	public function jetimob_section_info() {
		
	}

	public function api_callback() {
		printf(
			'<input class="regular-text" type="text" name="jetimob_option_name[api]" id="api" value="%s">',
			isset( $this->jetimob_options['api'] ) ? esc_attr( $this->jetimob_options['api']) : ''
		);
	}

	public function gmaps_callback() {
		printf(
			'<input class="regular-text" type="text" name="jetimob_option_name[gmaps]" id="gmaps" value="%s">',
			isset( $this->jetimob_options['gmaps'] ) ? esc_attr( $this->jetimob_options['gmaps']) : ''
		);
	}

	public function theme_callback() {
	
	}

}
if ( is_admin() )
	$jetimob = new Jetimob();


require_once dirname( __FILE__ ) . '/tgmpa/class-tgm-plugin-activation.php';

add_action( 'tgmpa_register', 'jetimob_register_required_plugins' );

function jetimob_register_required_plugins() {

	$plugins = array(
		array(
				'name'      => 'Featured Image from URL',
				'slug'      => 'featured-image-from-url',
				'required'  => true,
			),
		array(
				'name'      => 'Font Awesome',
				'slug'      => 'font-awesome',
				'required'  => true,
			),
		array(
				'name'      => 'Search & Filter Pro',
				'slug'		=> 'search-filter-pro',
				'source'      => dirname( __FILE__ ).'/addon/search-filter-pro.zip',
				'required'  => true,
			),
		array(
				'name'      => 'Github Updater',
				'slug'		=> 'github-updater',
				'source'      => 'https://codeload.github.com/afragen/github-updater/zip/master',
				'required'  => true,
			),
		
	);

		$config = array(
		'id'           => 'jetimob',                 // Unique ID for hashing notices for multiple instances of TGMPA.
		'default_path' => '',                      // Default absolute path to bundled plugins.
		'menu'         => 'tgmpa-install-plugins', // Menu slug.
		'parent_slug'  => 'plugins.php',            // Parent menu slug.
		'capability'   => 'manage_options',    // Capability needed to view plugin install page, should be a capability associated with the parent menu used.
		'has_notices'  => true,                    // Show admin notices or not.
		'dismissable'  => true,                    // If false, a user cannot dismiss the nag message.
		'dismiss_msg'  => '',                      // If 'dismissable' is false, this message will be output at top of nag.
		'is_automatic' => false,                   // Automatically activate plugins after installation or not.
		'message'      => '',                      // Message to output right before the plugins table.

		
		'strings'      => array(
			'page_title'                      => __( 'Install Required Plugins', 'jetimob' ),
			'menu_title'                      => __( 'Install Plugins', 'jetimob' ),
			/* translators: %s: plugin name. */
			'installing'                      => __( 'Installing Plugin: %s', 'jetimob' ),
			/* translators: %s: plugin name. */
			'updating'                        => __( 'Updating Plugin: %s', 'jetimob' ),
			'oops'                            => __( 'Something went wrong with the plugin API.', 'jetimob' ),
			'notice_can_install_required'     => _n_noop(
				/* translators: 1: plugin name(s). */
				'This theme requires the following plugin: %1$s.',
				'This theme requires the following plugins: %1$s.',
				'jetimob'
			),
			'notice_can_install_recommended'  => _n_noop(
				/* translators: 1: plugin name(s). */
				'This theme recommends the following plugin: %1$s.',
				'This theme recommends the following plugins: %1$s.',
				'jetimob'
			),
			'notice_ask_to_update'            => _n_noop(
				/* translators: 1: plugin name(s). */
				'The following plugin needs to be updated to its latest version to ensure maximum compatibility with this theme: %1$s.',
				'The following plugins need to be updated to their latest version to ensure maximum compatibility with this theme: %1$s.',
				'jetimob'
			),
			'notice_ask_to_update_maybe'      => _n_noop(
				/* translators: 1: plugin name(s). */
				'There is an update available for: %1$s.',
				'There are updates available for the following plugins: %1$s.',
				'jetimob'
			),
			'notice_can_activate_required'    => _n_noop(
				/* translators: 1: plugin name(s). */
				'The following required plugin is currently inactive: %1$s.',
				'The following required plugins are currently inactive: %1$s.',
				'jetimob'
			),
			'notice_can_activate_recommended' => _n_noop(
				/* translators: 1: plugin name(s). */
				'The following recommended plugin is currently inactive: %1$s.',
				'The following recommended plugins are currently inactive: %1$s.',
				'jetimob'
			),
			'install_link'                    => _n_noop(
				'Begin installing plugin',
				'Begin installing plugins',
				'jetimob'
			),
			'update_link' 					  => _n_noop(
				'Begin updating plugin',
				'Begin updating plugins',
				'jetimob'
			),
			'activate_link'                   => _n_noop(
				'Begin activating plugin',
				'Begin activating plugins',
				'jetimob'
			),
			'return'                          => __( 'Return to Required Plugins Installer', 'jetimob' ),
			'plugin_activated'                => __( 'Plugin activated successfully.', 'jetimob' ),
			'activated_successfully'          => __( 'The following plugin was activated successfully:', 'jetimob' ),
			/* translators: 1: plugin name. */
			'plugin_already_active'           => __( 'No action taken. Plugin %1$s was already active.', 'jetimob' ),
			/* translators: 1: plugin name. */
			'plugin_needs_higher_version'     => __( 'Plugin not activated. A higher version of %s is needed for this theme. Please update the plugin.', 'jetimob' ),
			/* translators: 1: dashboard link. */
			'complete'                        => __( 'All plugins installed and activated successfully. %1$s', 'jetimob' ),
			'dismiss'                         => __( 'Dismiss this notice', 'jetimob' ),
			'notice_cannot_install_activate'  => __( 'There are one or more required or recommended plugins to install, update or activate.', 'jetimob' ),
			'contact_admin'                   => __( 'Please contact the administrator of this site for help.', 'jetimob' ),

			'nag_type'                        => '', // Determines admin notice type - can only be one of the typical WP notice classes, such as 'updated', 'update-nag', 'notice-warning', 'notice-info' or 'error'. Some of which may not work as expected in older WP versions.
		),
			
	);

	tgmpa( $plugins, $config );
}
//captação de Leads para o plugin Gravity Forms
add_action("gform_post_submission", "set_post_content", 10, 2);
 function set_post_content($entry, $form){
	 $message = print_r($entry, true);
	 $message = wordwrap($message, 70);

	if($form["id"] == 1) { //substitua pelo ID do formulário
	 $data = array(
	'source' => 'site', //não alterar
	'full_name' => $entry["6"], //substituir pelo ID do campo correto
	'email' => $entry["7"], //substituir pelo ID do campo correto
	'country_code' => '55',
	'phone' => preg_replace("/[^0-9,.]/", "", $entry["10"] ), //substituir pelo ID do campo correto
	'message' => $entry["5"].'<br>'.$entry['source_url'], //substituir pelo ID do campo correto, não alterar o valor de 'entry_url' para obter a origem do formulário
	'sended_at' => $entry["date_created"],	//não alterar
	 );
	}

	$jetimob_options = get_option( 'jetimob_option_name' ); 
	$api = $jetimob_options['api'];

	$ch = curl_init();					

	$datajson = json_encode($data);

	$headers = array( 
		'Content-Type: application/json',  
		//'Authorization-Key: '. $chaveprivada .'',
		);
	$curl_function = curl_setopt_array(
	    $ch, array( 
	    CURLOPT_URL => 'https://www.jetimob.com/api/'.$api.'/leads',
	    CURLOPT_CUSTOMREQUEST => 'POST',
	    CURLOPT_POSTFIELDS => $datajson, 
	    CURLOPT_HTTPHEADER => $headers,
	    CURLOPT_RETURNTRANSFER => true,

	));

	$output = curl_exec($ch);

	if (!$output) {
	    echo 'Ocorreu um erro: ' . curl_error($ch);
	}
}

if ( ! function_exists('custom_post_type_imovel') ) {

	add_theme_support('post-thumbnails');
	add_post_type_support( 'imovel', 'thumbnail' );  
	// Register Custom Post Type
	function custom_post_type_imovel() {

		$labels = array(
			'name'                  => _x( 'Imóveis', 'Post Type General Name', 'text_domain' ),
			'singular_name'         => _x( 'Imóvel', 'Post Type Singular Name', 'text_domain' ),
			'menu_name'             => __( 'Imóveis', 'text_domain' ),
			'name_admin_bar'        => __( 'Imóveis', 'text_domain' ),

		);
		$args = array(
			'label'                 => __( 'Imóvel', 'text_domain' ),
			'description'           => __( 'Post Type Description', 'text_domain' ),
			'labels'                => $labels,
			'supports'              => array( 'title', 'editor', 'custom-fields', 'thumbnail' ),
			'hierarchical'          => false,
			'public'                => true,
			'show_ui'               => true,
			'show_in_menu'          => true,
			'menu_position'         => 5,
			'show_in_admin_bar'     => true,
			'show_in_nav_menus'     => true,
			'can_export'            => false,
			'has_archive'           => true,
			'exclude_from_search'   => false,
			'publicly_queryable'    => true,
			'rewrite'				=> true,
			'capability_type'		=> 'post'
		);
		register_post_type( 'imovel', $args );

	}
	add_action( 'init', 'custom_post_type_imovel', 0 );
}

if ( ! function_exists( 'custom_taxonomy_tipoimovel' ) ) {
	// Register Custom Taxonomy
	function custom_taxonomy_tipoimovel() {

		$labels = array(
			'name'                       => _x( 'Tipos Imóvel', 'Taxonomy General Name', 'text_domain' ),
			'singular_name'              => _x( 'Tipo Imóvel', 'Taxonomy Singular Name', 'text_domain' ),
			'menu_name'                  => __( 'Tipos de Imóvel', 'text_domain' ),
			'all_items'                  => __( 'Todos', 'text_domain' ),
			'parent_item'                => __( 'Item ascendente', 'text_domain' ),
			'parent_item_colon'          => __( 'Item ascendente:', 'text_domain' ),
			'new_item_name'              => __( 'Novo tipo', 'text_domain' ),
			'add_new_item'               => __( 'Adicionar tipo', 'text_domain' ),
			'edit_item'                  => __( 'Editar tipo', 'text_domain' ),
			'update_item'                => __( 'Atualizar tipo', 'text_domain' ),
			'view_item'                  => __( 'Ver item', 'text_domain' ),
			'separate_items_with_commas' => __( 'Separe os itens com virgulas', 'text_domain' ),
			'add_or_remove_items'        => __( 'Adicione ou remova itens', 'text_domain' ),
			'choose_from_most_used'      => __( 'Escolha entre os mais utilizados', 'text_domain' ),
			'popular_items'              => __( 'Itens populares', 'text_domain' ),
			'search_items'               => __( 'Pesquisar', 'text_domain' ),
			'not_found'                  => __( 'Nada encontrado', 'text_domain' ),
			'no_terms'                   => __( 'Sem itens', 'text_domain' ),
			'items_list'                 => __( 'Lista de itens', 'text_domain' ),
			'items_list_navigation'      => __( 'Navegar nos itens', 'text_domain' ),
		);
		$args = array(
			'labels'                     => $labels,
			'hierarchical'               => true,
			'public'                     => true,
			'show_ui'                    => true,
			'show_admin_column'          => false,
			'show_in_nav_menus'          => false,
			'show_tagcloud'              => false,
		);
		register_taxonomy( 'tipo_imovel', array( 'imovel' ), $args );

	}
	add_action( 'init', 'custom_taxonomy_tipoimovel', 0 );
}

if ( ! function_exists( 'custom_taxonomy_comodidadesimovel' ) ) {
	// Register Custom Taxonomy
	function custom_taxonomy_comodidadesimovel() {

		$labels = array(
			'name'                       => _x( 'Comodidades Imóvel', 'Taxonomy General Name', 'text_domain' ),
			'singular_name'              => _x( 'Comodidade Imóvel', 'Taxonomy Singular Name', 'text_domain' ),
			'menu_name'                  => __( 'Comodidades Imóveis', 'text_domain' ),
			'all_items'                  => __( 'Todos', 'text_domain' ),
			'parent_item'                => __( 'Pai', 'text_domain' ),
			'parent_item_colon'          => __( 'Pai:', 'text_domain' ),
			'new_item_name'              => __( 'Novo', 'text_domain' ),
			'add_new_item'               => __( 'Adicionar', 'text_domain' ),
			'edit_item'                  => __( 'Editar', 'text_domain' ),
			'update_item'                => __( 'Atualizar', 'text_domain' ),
			'view_item'                  => __( 'Ver item', 'text_domain' ),
			'separate_items_with_commas' => __( 'Separe os itens com virgulas', 'text_domain' ),
			'add_or_remove_items'        => __( 'Adicione ou remova itens', 'text_domain' ),
			'choose_from_most_used'      => __( 'Escolha entre os mais utilizados', 'text_domain' ),
			'popular_items'              => __( 'Itens populares', 'text_domain' ),
			'search_items'               => __( 'Pesquisar', 'text_domain' ),
			'not_found'                  => __( 'Nada encontrado', 'text_domain' ),
			'no_terms'                   => __( 'Sem itens', 'text_domain' ),
			'items_list'                 => __( 'Lista de itens', 'text_domain' ),
			'items_list_navigation'      => __( 'Navegar nos itens', 'text_domain' ),
		);
		$args = array(
			'labels'                     => $labels,
			'hierarchical'               => true,
			'public'                     => true,
			'show_ui'                    => true,
			'show_admin_column'          => false,
			'show_in_nav_menus'          => false,
			'show_tagcloud'              => false,
		);
		register_taxonomy( 'imovel_comodidades', array( 'imovel' ), $args );

	}
	add_action( 'init', 'custom_taxonomy_comodidadesimovel', 0 );

}

if ( ! function_exists( 'custom_taxonomy_comodidadescondominio' ) ) {

// Register Custom Taxonomy
function custom_taxonomy_comodidadescondominio() {

	$labels = array(
		'name'                       => _x( 'Comodidades Condomínio', 'Taxonomy General Name', 'text_domain' ),
		'singular_name'              => _x( 'Comodidade Condomínio', 'Taxonomy Singular Name', 'text_domain' ),
		'menu_name'                  => __( 'Comodidades Condomínio', 'text_domain' ),
		'all_items'                  => __( 'Todos', 'text_domain' ),
		'parent_item'                => __( 'Pai', 'text_domain' ),
		'parent_item_colon'          => __( 'Pai:', 'text_domain' ),
		'new_item_name'              => __( 'Novo', 'text_domain' ),
		'add_new_item'               => __( 'Adicionar', 'text_domain' ),
		'edit_item'                  => __( 'Editar', 'text_domain' ),
		'update_item'                => __( 'Atualizar', 'text_domain' ),
		'view_item'                  => __( 'Ver item', 'text_domain' ),
		'separate_items_with_commas' => __( 'Separe os itens com virgulas', 'text_domain' ),
		'add_or_remove_items'        => __( 'Adicione ou remova itens', 'text_domain' ),
		'choose_from_most_used'      => __( 'Escolha entre os mais utilizados', 'text_domain' ),
		'popular_items'              => __( 'Itens populares', 'text_domain' ),
		'search_items'               => __( 'Pesquisar', 'text_domain' ),
		'not_found'                  => __( 'Nada encontrado', 'text_domain' ),
		'no_terms'                   => __( 'Sem itens', 'text_domain' ),
		'items_list'                 => __( 'Lista de itens', 'text_domain' ),
		'items_list_navigation'      => __( 'Navegar nos itens', 'text_domain' ),
	);
	$args = array(
		'labels'                     => $labels,
		'hierarchical'               => true,
		'public'                     => true,
		'show_ui'                    => true,
		'show_admin_column'          => false,
		'show_in_nav_menus'          => false,
		'show_tagcloud'              => false,
	);
	register_taxonomy( 'condominio_comodidades', array( 'imovel' ), $args );

}
add_action( 'init', 'custom_taxonomy_comodidadescondominio', 0 );

}
if ( ! function_exists( 'custom_taxonomy_localizacao' ) ) {

// Register Custom Taxonomy
function custom_taxonomy_localizacao() {

	$labels = array(
		'name'                       => _x( 'Localização', 'Taxonomy General Name', 'text_domain' ),
		'singular_name'              => _x( 'Localização', 'Taxonomy Singular Name', 'text_domain' ),
		'menu_name'                  => __( 'Localização', 'text_domain' ),
		'all_items'                  => __( 'Todos', 'text_domain' ),
		'parent_item'                => __( 'Pai', 'text_domain' ),
		'parent_item_colon'          => __( 'Pai:', 'text_domain' ),
		'new_item_name'              => __( 'Novo', 'text_domain' ),
		'add_new_item'               => __( 'Adicionar', 'text_domain' ),
		'edit_item'                  => __( 'Editar', 'text_domain' ),
		'update_item'                => __( 'Atualizar', 'text_domain' ),
		'view_item'                  => __( 'Ver item', 'text_domain' ),
		'separate_items_with_commas' => __( 'Separe os itens com virgulas', 'text_domain' ),
		'add_or_remove_items'        => __( 'Adicione ou remova itens', 'text_domain' ),
		'choose_from_most_used'      => __( 'Escolha entre os mais utilizados', 'text_domain' ),
		'popular_items'              => __( 'Itens populares', 'text_domain' ),
		'search_items'               => __( 'Pesquisar', 'text_domain' ),
		'not_found'                  => __( 'Nada encontrado', 'text_domain' ),
		'no_terms'                   => __( 'Sem itens', 'text_domain' ),
		'items_list'                 => __( 'Lista de itens', 'text_domain' ),
		'items_list_navigation'      => __( 'Navegar nos itens', 'text_domain' ),
	);
	$args = array(
		'labels'                     => $labels,
		'hierarchical'               => true,
		'public'                     => true,
		'show_ui'                    => true,
		'show_admin_column'          => false,
		'show_in_nav_menus'          => false,
		'show_tagcloud'              => false,
	);
	register_taxonomy( 'localizacao', array( 'imovel' ), $args );

}
add_action( 'init', 'custom_taxonomy_localizacao', 0 );

}

add_filter( 'single_template', 'jetimob_single_template', 50, 1 );
function jetimob_single_template( $template ) {

	if ( is_singular( 'imovel' ) ) {
		//$template = plugin_dir_path( 'templates/single-imovel.php', __FILE__ );
		$template = plugin_dir_path( __FILE__ ).'templates/single-imovel.php';
	}
	
	return $template;
}


add_filter( 'archive_template', 'jetimob_archive_template', 50, 1 );
function jetimob_archive_template( $template ) {

	if ( is_archive( 'imovel' ) ) {
		//$template = plugin_dir_path( 'templates/single-imovel.php', __FILE__ );
		$template = plugin_dir_path( __FILE__ ).'templates/archive-imovel.php';
	}
	
	return $template;
}


function jetimob_enqueue_script() { 
	$options = get_site_option('jetimob_option_name'); 
    $maps_api = $options['gmaps'];  
 	
 	wp_enqueue_script( 'google_js', 'https://maps.googleapis.com/maps/api/js?v=3&key='.$maps_api, '', null, '' );

    wp_enqueue_script( 'jquery', 'https://cdnjs.cloudflare.com/ajax/libs/jquery/1.12.4/jquery.min.js', '', null,'' );
    //wp_enqueue_script( 'slider_js', 'https://cdnjs.cloudflare.com/ajax/libs/galleria/1.5.7/galleria.js', '', null,'' );
	//wp_register_script( 'slider_imovel' );


	//wp_enqueue_style( 'slider_css', 'https://cdnjs.cloudflare.com/ajax/libs/galleria/1.5.7/themes/classic/galleria.classic.css', '','', 'screen' );
	//wp_register_style('slider_css');
}

add_action('wp_enqueue_scripts', 'jetimob_enqueue_script');

function wpse255804_add_page_template ($templates) {
    $templates['advanced-search.php'] = 'resultados de busca';
    return $templates;
    }
add_filter ('theme_page_templates', 'wpse255804_add_page_template');

function wpse255804_redirect_page_template ($template) {
    if ('advanced-search.php' == basename ($template))
        $template = WP_PLUGIN_DIR . '/jetimob/templates/advanced-search.php';
    return $template;
    }
add_filter ('page_template', 'wpse255804_redirect_page_template');

// Add Search Fields
/*
$import_data = array(
'post_type' => 'search-filter-widget',
'post_status'	=> 'publish',
'post_title'	=> 'Busca Imóveis',
'post_name'		=> 'busca-imoveis',
'post_date'		=> '2019-01-01',
'post_author'	=> 1,
);
$new_post = wp_insert_post($import_data, true);
if(!is_wp_error($new_post)){
  //the post is valid
}else{
  //there was an error in the post insertion, 
echo $new_post->get_error_message();
}

$postid = $new_post;

// Update post 37
  $upd_post = array(
      'ID'           => $postid,
      'guid'   => get_site_url().'/?post_type=search-filter-widget&#038;p='.$postid,
  );

// Update the post into the database
wp_update_post( $upd_post );

update_post_meta($postid, '_search-filter-settings', 'a:36:{s:26:"use_template_manual_toggle";i:1;s:24:"enable_taxonomy_archives";i:0;s:17:"enable_auto_count";i:1;s:23:"auto_count_refresh_mode";i:1;s:25:"auto_count_deselect_emtpy";i:0;s:20:"template_name_manual";s:10:"search.php";s:9:"page_slug";s:0:"";s:10:"post_types";a:1:{s:6:"imovel";i:1;}s:11:"post_status";a:1:{s:7:"publish";i:1;}s:15:"use_ajax_toggle";i:1;s:13:"scroll_to_pos";s:1:"0";s:15:"pagination_type";s:6:"normal";s:16:"custom_scroll_to";s:0:"";s:11:"auto_submit";i:1;s:18:"display_results_as";s:7:"archive";s:15:"update_ajax_url";i:1;s:17:"only_results_ajax";i:1;s:11:"ajax_target";s:5:"#main";s:19:"ajax_links_selector";s:13:".pagination a";s:25:"infinite_scroll_container";s:0:"";s:23:"infinite_scroll_trigger";s:4:"-100";s:28:"infinite_scroll_result_class";s:0:"";s:27:"show_infinite_scroll_loader";i:1;s:16:"results_per_page";i:10;s:16:"exclude_post_ids";s:0:"";s:14:"field_relation";s:3:"and";s:15:"default_sort_by";s:4:"date";s:12:"sticky_posts";s:0:"";s:16:"default_sort_dir";s:3:"asc";s:16:"default_meta_key";s:10:"_edit_last";s:17:"default_sort_type";s:7:"numeric";s:17:"secondary_sort_by";s:4:"name";s:18:"secondary_sort_dir";s:3:"asc";s:18:"secondary_meta_key";s:10:"_edit_last";s:19:"secondary_sort_type";s:7:"numeric";s:19:"taxonomies_settings";a:7:{s:8:"category";a:2:{s:15:"include_exclude";s:7:"include";s:3:"ids";s:0:"";}s:8:"post_tag";a:2:{s:15:"include_exclude";s:7:"include";s:3:"ids";s:0:"";}s:11:"post_format";a:2:{s:15:"include_exclude";s:7:"include";s:3:"ids";s:0:"";}s:11:"tipo_imovel";a:2:{s:15:"include_exclude";s:7:"include";s:3:"ids";s:0:"";}s:18:"imovel_comodidades";a:2:{s:15:"include_exclude";s:7:"include";s:3:"ids";s:0:"";}s:22:"condominio_comodidades";a:2:{s:15:"include_exclude";s:7:"include";s:3:"ids";s:0:"";}s:11:"localizacao";a:2:{s:15:"include_exclude";s:7:"include";s:3:"ids";s:0:"";}}}');

update_post_meta($postid, '_search-filter-results-url', '');

update_post_meta($postid, '_search-filter-fields', 'a:10:{i:0;a:18:{s:4:"type";s:8:"taxonomy";s:10:"input_type";s:6:"select";s:7:"heading";s:15:"Tipo de Imóvel";s:19:"accessibility_label";s:0:"";s:15:"all_items_label";s:11:"Indiferente";s:10:"show_count";i:1;s:10:"hide_empty";i:1;s:12:"hierarchical";i:0;s:16:"include_children";i:1;s:10:"drill_down";i:0;s:20:"sync_include_exclude";i:1;s:9:"combo_box";i:0;s:18:"no_results_message";s:0:"";s:8:"operator";s:3:"and";s:8:"order_by";s:7:"default";s:9:"order_dir";s:3:"asc";s:11:"exclude_ids";s:0:"";s:13:"taxonomy_name";s:11:"tipo_imovel";}i:1;a:18:{s:4:"type";s:8:"taxonomy";s:10:"input_type";s:6:"select";s:7:"heading";s:13:"Localização";s:19:"accessibility_label";s:0:"";s:15:"all_items_label";s:11:"Indiferente";s:10:"show_count";i:1;s:10:"hide_empty";i:0;s:12:"hierarchical";i:1;s:16:"include_children";i:1;s:10:"drill_down";i:0;s:20:"sync_include_exclude";i:1;s:9:"combo_box";i:0;s:18:"no_results_message";s:0:"";s:8:"operator";s:3:"and";s:8:"order_by";s:7:"default";s:9:"order_dir";s:3:"asc";s:11:"exclude_ids";s:0:"";s:13:"taxonomy_name";s:11:"localizacao";}i:2;a:60:{s:4:"type";s:9:"post_meta";s:9:"meta_type";s:6:"choice";s:17:"number_input_type";s:12:"range-slider";s:17:"number_is_decimal";i:1;s:17:"choice_input_type";s:6:"select";s:15:"date_input_type";s:4:"date";s:22:"meta_key_manual_toggle";i:0;s:9:"combo_box";i:0;s:18:"no_results_message";s:0:"";s:10:"show_count";i:1;s:10:"hide_empty";i:0;s:10:"input_type";s:0:"";s:15:"choice_meta_key";s:11:"dormitorios";s:26:"choice_accessibility_label";s:0:"";s:22:"choice_get_option_mode";s:4:"auto";s:22:"choice_order_option_by";s:5:"value";s:23:"choice_order_option_dir";s:3:"asc";s:24:"choice_order_option_type";s:10:"alphabetic";s:13:"choice_is_acf";i:0;s:24:"date_accessibility_label";s:0:"";s:13:"date_meta_key";s:0:"";s:19:"date_start_meta_key";s:10:"_edit_last";s:17:"date_end_meta_key";s:0:"";s:20:"date_use_same_toggle";i:1;s:26:"number_accessibility_label";s:0:"";s:21:"number_start_meta_key";s:10:"_edit_last";s:19:"number_end_meta_key";s:0:"";s:22:"number_use_same_toggle";i:1;s:7:"heading";s:12:"Dormitórios";s:8:"meta_key";s:11:"dormitorios";s:16:"date_from_prefix";s:0:"";s:17:"date_from_postfix";s:0:"";s:21:"date_from_placeholder";s:0:"";s:14:"date_to_prefix";s:0:"";s:15:"date_to_postfix";s:0:"";s:19:"date_to_placeholder";s:0:"";s:23:"date_use_dropdown_month";i:0;s:22:"date_use_dropdown_year";i:0;s:14:"decimal_places";i:0;s:21:"number_decimal_places";i:2;s:18:"thousand_seperator";s:0:"";s:17:"decimal_seperator";s:1:".";s:23:"number_values_seperator";s:3:" - ";s:24:"number_display_values_as";s:9:"textinput";s:23:"number_display_input_as";s:11:"singlefield";s:16:"range_min_detect";i:0;s:16:"range_max_detect";i:0;s:9:"range_min";s:1:"0";s:9:"range_max";s:4:"1000";s:10:"range_step";s:2:"10";s:18:"range_value_prefix";s:0:"";s:19:"range_value_postfix";s:0:"";s:17:"date_input_format";s:9:"timestamp";s:17:"date_compare_mode";s:9:"userrange";s:19:"number_compare_mode";s:9:"userrange";s:18:"date_output_format";s:5:"d/m/Y";s:15:"all_items_label";s:11:"Indiferente";s:22:"all_items_label_number";s:0:"";s:8:"operator";s:3:"and";s:12:"meta_options";a:0:{}}i:3;a:60:{s:4:"type";s:9:"post_meta";s:9:"meta_type";s:6:"choice";s:17:"number_input_type";s:12:"range-slider";s:17:"number_is_decimal";i:0;s:17:"choice_input_type";s:6:"select";s:15:"date_input_type";s:4:"date";s:22:"meta_key_manual_toggle";i:0;s:9:"combo_box";i:0;s:18:"no_results_message";s:0:"";s:10:"show_count";i:1;s:10:"hide_empty";i:0;s:10:"input_type";s:0:"";s:15:"choice_meta_key";s:6:"suites";s:26:"choice_accessibility_label";s:0:"";s:22:"choice_get_option_mode";s:4:"auto";s:22:"choice_order_option_by";s:5:"value";s:23:"choice_order_option_dir";s:3:"asc";s:24:"choice_order_option_type";s:10:"alphabetic";s:13:"choice_is_acf";i:0;s:24:"date_accessibility_label";s:0:"";s:13:"date_meta_key";s:0:"";s:19:"date_start_meta_key";s:10:"_edit_last";s:17:"date_end_meta_key";s:0:"";s:20:"date_use_same_toggle";i:1;s:26:"number_accessibility_label";s:0:"";s:21:"number_start_meta_key";s:6:"suites";s:19:"number_end_meta_key";s:0:"";s:22:"number_use_same_toggle";i:1;s:7:"heading";s:7:"Suítes";s:8:"meta_key";s:6:"suites";s:16:"date_from_prefix";s:0:"";s:17:"date_from_postfix";s:0:"";s:21:"date_from_placeholder";s:0:"";s:14:"date_to_prefix";s:0:"";s:15:"date_to_postfix";s:0:"";s:19:"date_to_placeholder";s:0:"";s:23:"date_use_dropdown_month";i:0;s:22:"date_use_dropdown_year";i:0;s:14:"decimal_places";i:0;s:21:"number_decimal_places";i:2;s:18:"thousand_seperator";s:0:"";s:17:"decimal_seperator";s:1:".";s:23:"number_values_seperator";s:3:" - ";s:24:"number_display_values_as";s:9:"textinput";s:23:"number_display_input_as";s:11:"singlefield";s:16:"range_min_detect";i:1;s:16:"range_max_detect";i:1;s:9:"range_min";s:1:"0";s:9:"range_max";s:1:"0";s:10:"range_step";s:1:"1";s:18:"range_value_prefix";s:0:"";s:19:"range_value_postfix";s:0:"";s:17:"date_input_format";s:9:"timestamp";s:17:"date_compare_mode";s:9:"userrange";s:19:"number_compare_mode";s:9:"userrange";s:18:"date_output_format";s:5:"d/m/Y";s:15:"all_items_label";s:11:"Indiferente";s:22:"all_items_label_number";s:0:"";s:8:"operator";s:3:"and";s:12:"meta_options";a:0:{}}i:4;a:60:{s:4:"type";s:9:"post_meta";s:9:"meta_type";s:6:"choice";s:17:"number_input_type";s:12:"range-slider";s:17:"number_is_decimal";i:1;s:17:"choice_input_type";s:6:"select";s:15:"date_input_type";s:4:"date";s:22:"meta_key_manual_toggle";i:0;s:9:"combo_box";i:0;s:18:"no_results_message";s:0:"";s:10:"show_count";i:1;s:10:"hide_empty";i:0;s:10:"input_type";s:0:"";s:15:"choice_meta_key";s:9:"banheiros";s:26:"choice_accessibility_label";s:0:"";s:22:"choice_get_option_mode";s:4:"auto";s:22:"choice_order_option_by";s:5:"value";s:23:"choice_order_option_dir";s:3:"asc";s:24:"choice_order_option_type";s:10:"alphabetic";s:13:"choice_is_acf";i:0;s:24:"date_accessibility_label";s:0:"";s:13:"date_meta_key";s:0:"";s:19:"date_start_meta_key";s:10:"_edit_last";s:17:"date_end_meta_key";s:0:"";s:20:"date_use_same_toggle";i:1;s:26:"number_accessibility_label";s:0:"";s:21:"number_start_meta_key";s:10:"_edit_last";s:19:"number_end_meta_key";s:0:"";s:22:"number_use_same_toggle";i:1;s:7:"heading";s:9:"Banheiros";s:8:"meta_key";s:9:"banheiros";s:16:"date_from_prefix";s:0:"";s:17:"date_from_postfix";s:0:"";s:21:"date_from_placeholder";s:0:"";s:14:"date_to_prefix";s:0:"";s:15:"date_to_postfix";s:0:"";s:19:"date_to_placeholder";s:0:"";s:23:"date_use_dropdown_month";i:0;s:22:"date_use_dropdown_year";i:0;s:14:"decimal_places";i:0;s:21:"number_decimal_places";i:2;s:18:"thousand_seperator";s:0:"";s:17:"decimal_seperator";s:1:".";s:23:"number_values_seperator";s:3:" - ";s:24:"number_display_values_as";s:9:"textinput";s:23:"number_display_input_as";s:11:"singlefield";s:16:"range_min_detect";i:0;s:16:"range_max_detect";i:0;s:9:"range_min";s:1:"0";s:9:"range_max";s:4:"1000";s:10:"range_step";s:2:"10";s:18:"range_value_prefix";s:0:"";s:19:"range_value_postfix";s:0:"";s:17:"date_input_format";s:9:"timestamp";s:17:"date_compare_mode";s:9:"userrange";s:19:"number_compare_mode";s:9:"userrange";s:18:"date_output_format";s:5:"d/m/Y";s:15:"all_items_label";s:11:"Indiferente";s:22:"all_items_label_number";s:0:"";s:8:"operator";s:3:"and";s:12:"meta_options";a:0:{}}i:5;a:60:{s:4:"type";s:9:"post_meta";s:9:"meta_type";s:6:"choice";s:17:"number_input_type";s:12:"range-slider";s:17:"number_is_decimal";i:1;s:17:"choice_input_type";s:6:"select";s:15:"date_input_type";s:4:"date";s:22:"meta_key_manual_toggle";i:0;s:9:"combo_box";i:0;s:18:"no_results_message";s:0:"";s:10:"show_count";i:1;s:10:"hide_empty";i:1;s:10:"input_type";s:0:"";s:15:"choice_meta_key";s:8:"garagens";s:26:"choice_accessibility_label";s:0:"";s:22:"choice_get_option_mode";s:4:"auto";s:22:"choice_order_option_by";s:5:"value";s:23:"choice_order_option_dir";s:3:"asc";s:24:"choice_order_option_type";s:10:"alphabetic";s:13:"choice_is_acf";i:0;s:24:"date_accessibility_label";s:0:"";s:13:"date_meta_key";s:0:"";s:19:"date_start_meta_key";s:10:"_edit_last";s:17:"date_end_meta_key";s:0:"";s:20:"date_use_same_toggle";i:1;s:26:"number_accessibility_label";s:0:"";s:21:"number_start_meta_key";s:10:"_edit_last";s:19:"number_end_meta_key";s:0:"";s:22:"number_use_same_toggle";i:1;s:7:"heading";s:16:"Vagas de Garagem";s:8:"meta_key";s:8:"garagens";s:16:"date_from_prefix";s:0:"";s:17:"date_from_postfix";s:0:"";s:21:"date_from_placeholder";s:0:"";s:14:"date_to_prefix";s:0:"";s:15:"date_to_postfix";s:0:"";s:19:"date_to_placeholder";s:0:"";s:23:"date_use_dropdown_month";i:0;s:22:"date_use_dropdown_year";i:0;s:14:"decimal_places";i:0;s:21:"number_decimal_places";i:2;s:18:"thousand_seperator";s:0:"";s:17:"decimal_seperator";s:1:".";s:23:"number_values_seperator";s:3:" - ";s:24:"number_display_values_as";s:9:"textinput";s:23:"number_display_input_as";s:11:"singlefield";s:16:"range_min_detect";i:0;s:16:"range_max_detect";i:0;s:9:"range_min";s:1:"0";s:9:"range_max";s:4:"1000";s:10:"range_step";s:2:"10";s:18:"range_value_prefix";s:0:"";s:19:"range_value_postfix";s:0:"";s:17:"date_input_format";s:9:"timestamp";s:17:"date_compare_mode";s:9:"userrange";s:19:"number_compare_mode";s:9:"userrange";s:18:"date_output_format";s:5:"d/m/Y";s:15:"all_items_label";s:11:"Indiferente";s:22:"all_items_label_number";s:0:"";s:8:"operator";s:3:"and";s:12:"meta_options";a:0:{}}i:6;a:18:{s:4:"type";s:8:"taxonomy";s:10:"input_type";s:8:"checkbox";s:7:"heading";s:11:"Comodidades";s:19:"accessibility_label";s:0:"";s:15:"all_items_label";s:0:"";s:10:"show_count";i:1;s:10:"hide_empty";i:0;s:12:"hierarchical";i:0;s:16:"include_children";i:0;s:10:"drill_down";i:0;s:20:"sync_include_exclude";i:1;s:9:"combo_box";i:0;s:18:"no_results_message";s:0:"";s:8:"operator";s:3:"and";s:8:"order_by";s:7:"default";s:9:"order_dir";s:3:"asc";s:11:"exclude_ids";s:0:"";s:13:"taxonomy_name";s:18:"imovel_comodidades";}i:7;a:60:{s:4:"type";s:9:"post_meta";s:9:"meta_type";s:6:"number";s:17:"number_input_type";s:12:"range-slider";s:17:"number_is_decimal";i:1;s:17:"choice_input_type";s:6:"select";s:15:"date_input_type";s:4:"date";s:22:"meta_key_manual_toggle";i:0;s:9:"combo_box";i:0;s:18:"no_results_message";s:0:"";s:10:"show_count";i:1;s:10:"hide_empty";i:0;s:10:"input_type";s:0:"";s:15:"choice_meta_key";s:10:"_edit_last";s:26:"choice_accessibility_label";s:0:"";s:22:"choice_get_option_mode";s:4:"auto";s:22:"choice_order_option_by";s:5:"value";s:23:"choice_order_option_dir";s:3:"asc";s:24:"choice_order_option_type";s:10:"alphabetic";s:13:"choice_is_acf";i:0;s:24:"date_accessibility_label";s:0:"";s:13:"date_meta_key";s:0:"";s:19:"date_start_meta_key";s:10:"_edit_last";s:17:"date_end_meta_key";s:0:"";s:20:"date_use_same_toggle";i:1;s:26:"number_accessibility_label";s:0:"";s:21:"number_start_meta_key";s:11:"valor_venda";s:19:"number_end_meta_key";s:0:"";s:22:"number_use_same_toggle";i:1;s:7:"heading";s:14:"Valor Venda R$";s:8:"meta_key";s:11:"valor_venda";s:16:"date_from_prefix";s:0:"";s:17:"date_from_postfix";s:0:"";s:21:"date_from_placeholder";s:0:"";s:14:"date_to_prefix";s:0:"";s:15:"date_to_postfix";s:0:"";s:19:"date_to_placeholder";s:0:"";s:23:"date_use_dropdown_month";i:0;s:22:"date_use_dropdown_year";i:0;s:14:"decimal_places";i:0;s:21:"number_decimal_places";i:2;s:18:"thousand_seperator";s:0:"";s:17:"decimal_seperator";s:1:".";s:23:"number_values_seperator";s:3:" - ";s:24:"number_display_values_as";s:9:"textinput";s:23:"number_display_input_as";s:11:"singlefield";s:16:"range_min_detect";i:0;s:16:"range_max_detect";i:0;s:9:"range_min";s:1:"1";s:9:"range_max";s:9:"100000000";s:10:"range_step";s:5:"10000";s:18:"range_value_prefix";s:3:"R$ ";s:19:"range_value_postfix";s:0:"";s:17:"date_input_format";s:9:"timestamp";s:17:"date_compare_mode";s:9:"userrange";s:19:"number_compare_mode";s:9:"userrange";s:18:"date_output_format";s:5:"d/m/Y";s:15:"all_items_label";s:0:"";s:22:"all_items_label_number";s:0:"";s:8:"operator";s:3:"and";s:12:"meta_options";a:0:{}}i:8;a:60:{s:4:"type";s:9:"post_meta";s:9:"meta_type";s:6:"number";s:17:"number_input_type";s:12:"range-slider";s:17:"number_is_decimal";i:1;s:17:"choice_input_type";s:6:"select";s:15:"date_input_type";s:4:"date";s:22:"meta_key_manual_toggle";i:0;s:9:"combo_box";i:0;s:18:"no_results_message";s:0:"";s:10:"show_count";i:1;s:10:"hide_empty";i:0;s:10:"input_type";s:0:"";s:15:"choice_meta_key";s:10:"_edit_last";s:26:"choice_accessibility_label";s:0:"";s:22:"choice_get_option_mode";s:4:"auto";s:22:"choice_order_option_by";s:5:"value";s:23:"choice_order_option_dir";s:3:"asc";s:24:"choice_order_option_type";s:10:"alphabetic";s:13:"choice_is_acf";i:0;s:24:"date_accessibility_label";s:0:"";s:13:"date_meta_key";s:0:"";s:19:"date_start_meta_key";s:10:"_edit_last";s:17:"date_end_meta_key";s:0:"";s:20:"date_use_same_toggle";i:1;s:26:"number_accessibility_label";s:0:"";s:21:"number_start_meta_key";s:13:"valor_locacao";s:19:"number_end_meta_key";s:0:"";s:22:"number_use_same_toggle";i:1;s:7:"heading";s:15:"Valor Locação";s:8:"meta_key";s:13:"valor_locacao";s:16:"date_from_prefix";s:0:"";s:17:"date_from_postfix";s:0:"";s:21:"date_from_placeholder";s:0:"";s:14:"date_to_prefix";s:0:"";s:15:"date_to_postfix";s:0:"";s:19:"date_to_placeholder";s:0:"";s:23:"date_use_dropdown_month";i:0;s:22:"date_use_dropdown_year";i:0;s:14:"decimal_places";i:0;s:21:"number_decimal_places";i:2;s:18:"thousand_seperator";s:0:"";s:17:"decimal_seperator";s:1:".";s:23:"number_values_seperator";s:3:" - ";s:24:"number_display_values_as";s:9:"textinput";s:23:"number_display_input_as";s:12:"fromtofields";s:16:"range_min_detect";i:0;s:16:"range_max_detect";i:0;s:9:"range_min";s:1:"0";s:9:"range_max";s:5:"10000";s:10:"range_step";s:2:"10";s:18:"range_value_prefix";s:2:"R$";s:19:"range_value_postfix";s:0:"";s:17:"date_input_format";s:9:"timestamp";s:17:"date_compare_mode";s:9:"userrange";s:19:"number_compare_mode";s:9:"userrange";s:18:"date_output_format";s:5:"d/m/Y";s:15:"all_items_label";s:0:"";s:22:"all_items_label_number";s:0:"";s:8:"operator";s:3:"and";s:12:"meta_options";a:0:{}}i:9;a:60:{s:4:"type";s:9:"post_meta";s:9:"meta_type";s:6:"number";s:17:"number_input_type";s:12:"range-slider";s:17:"number_is_decimal";i:1;s:17:"choice_input_type";s:6:"select";s:15:"date_input_type";s:4:"date";s:22:"meta_key_manual_toggle";i:0;s:9:"combo_box";i:0;s:18:"no_results_message";s:0:"";s:10:"show_count";i:1;s:10:"hide_empty";i:0;s:10:"input_type";s:0:"";s:15:"choice_meta_key";s:10:"_edit_last";s:26:"choice_accessibility_label";s:0:"";s:22:"choice_get_option_mode";s:4:"auto";s:22:"choice_order_option_by";s:5:"value";s:23:"choice_order_option_dir";s:3:"asc";s:24:"choice_order_option_type";s:10:"alphabetic";s:13:"choice_is_acf";i:0;s:24:"date_accessibility_label";s:0:"";s:13:"date_meta_key";s:0:"";s:19:"date_start_meta_key";s:10:"_edit_last";s:17:"date_end_meta_key";s:0:"";s:20:"date_use_same_toggle";i:1;s:26:"number_accessibility_label";s:0:"";s:21:"number_start_meta_key";s:15:"valor_temporada";s:19:"number_end_meta_key";s:0:"";s:22:"number_use_same_toggle";i:1;s:7:"heading";s:15:"Valor Temporada";s:8:"meta_key";s:15:"valor_temporada";s:16:"date_from_prefix";s:0:"";s:17:"date_from_postfix";s:0:"";s:21:"date_from_placeholder";s:0:"";s:14:"date_to_prefix";s:0:"";s:15:"date_to_postfix";s:0:"";s:19:"date_to_placeholder";s:0:"";s:23:"date_use_dropdown_month";i:0;s:22:"date_use_dropdown_year";i:0;s:14:"decimal_places";i:0;s:21:"number_decimal_places";i:2;s:18:"thousand_seperator";s:0:"";s:17:"decimal_seperator";s:1:".";s:23:"number_values_seperator";s:3:" - ";s:24:"number_display_values_as";s:9:"textinput";s:23:"number_display_input_as";s:11:"singlefield";s:16:"range_min_detect";i:0;s:16:"range_max_detect";i:0;s:9:"range_min";s:1:"0";s:9:"range_max";s:4:"5000";s:10:"range_step";s:2:"10";s:18:"range_value_prefix";s:2:"R$";s:19:"range_value_postfix";s:0:"";s:17:"date_input_format";s:9:"timestamp";s:17:"date_compare_mode";s:9:"userrange";s:19:"number_compare_mode";s:9:"userrange";s:18:"date_output_format";s:5:"d/m/Y";s:15:"all_items_label";s:0:"";s:22:"all_items_label_number";s:0:"";s:8:"operator";s:3:"and";s:12:"meta_options";a:0:{}}}');

*/

include_once('updater.php');
if (is_admin()) { // note the use of is_admin() to double check that this is happening in the admin
		$config = array(
			'slug' => plugin_basename(__FILE__), // this is the slug of your plugin
			'proper_folder_name' => 'jetimob-plugin-wordpress', // this is the name of the folder your plugin lives in
			'api_url' => 'https://api.github.com/repos/opaweb/jetimob-plugin-wordpress', // the GitHub API url of your GitHub repo
			'raw_url' => 'https://raw.github.com/opaweb/jetimob-plugin-wordpress/master', // the GitHub raw url of your GitHub repo
			'github_url' => 'https://github.com/opaweb/jetimob-plugin-wordpress', // the GitHub url of your GitHub repo
			'zip_url' => 'https://github.com/opaweb/jetimob-plugin-wordpress/zipball/master', // the zip url of the GitHub repo
			'sslverify' => true, // whether WP should check the validity of the SSL cert when getting an update, see https://github.com/jkudish/WordPress-GitHub-Plugin-Updater/issues/2 and https://github.com/jkudish/WordPress-GitHub-Plugin-Updater/issues/4 for details
			'requires' => '4.8', // which version of WordPress does your plugin require?
			'tested' => '5.3', // which version of WordPress is your plugin tested up to?
			'readme' => 'README.md', // which file to use as the readme for the version number
			'access_token' => '', // Access private repositories by authorizing under Appearance > GitHub Updates when this example plugin is installed
		);
		new WP_GitHub_Updater($config);
	}